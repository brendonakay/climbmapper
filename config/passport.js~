var Strategy = require('passport-local').Strategy;
var users = require('./routes/users');

module.exports = function(passport) {

	passport.use('local', new Strategy({
			usernameField : 'username',
	      passwordField : 'password',
	      passReqToCallback : true // allows us to pass back the entire request to the callback
		},
		function(req, username, password, cb) {
		    users.findByUsername(username, function(err, user) {
		      if(err) { 
		      	return cb(err); 
		      }
		      if(!user){ 
		      	return cb(null, false); 
		      }
		      if(user.password != password) { 
		     		return cb(null, false, req.flash('loginMessage', 'Oops... Wrong password. Please try again.')); 
		     	}
		      return cb(null, user);
		    });
		  }
	));
	
	passport.use('local-signup', new Strategy({
			usernameField : 'username',
	      passwordField : 'password',
	      passReqToCallback : true // allows us to pass back the entire request to the callback
	  },
	  function(req, username, password, cb) {
	  	
		  	users.verifyUser(username, function(err, user) {
		      if(err){ 
		      	return cb(err); 
		      }
		      
		      if(user){ 
		      	return cb(null, false, req.flash('loginMessage', 'This user name is already taken. Please try a new one.')); 
		      }
		      else{
		      	var isValidPass = users.verifyPassword(password);
		      	
		      	if(isValidPass){
		      		var newUserObj = users.createUser(username, password);
		      		
		      		return cb(null, newUserObj);
		      	}
		      	else {
		      		return cb(null, false, req.flash('loginMessage', 'Your password is too weak. Please try a new one.'));
		      	}
		      }
		    });
		}
	));
	  
	  
	passport.serializeUser(function(user, cb) {
	  cb(null, user.id);
	});
	
	passport.deserializeUser(function(id, cb) {
	  users.findById(id, function (err, user) {
	    if (err) { return cb(err); }
	    cb(null, user);
	  });
	});

}